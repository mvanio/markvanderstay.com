[
  {
    "objectID": "posts/chatgpt-in-r-using-r6-classes/index.html",
    "href": "posts/chatgpt-in-r-using-r6-classes/index.html",
    "title": "Working with the OpenAI ChatGPT API in R using R6 Classes",
    "section": "",
    "text": "![](r6-chatgpt.jpg)"
  },
  {
    "objectID": "posts/chatgpt-in-r-using-r6-classes/index.html#working-with-the-openai-chatgpt-api-in-r-using-r6-classes",
    "href": "posts/chatgpt-in-r-using-r6-classes/index.html#working-with-the-openai-chatgpt-api-in-r-using-r6-classes",
    "title": "Working with the OpenAI ChatGPT API in R using R6 Classes",
    "section": "Working with the OpenAI ChatGPT API in R using R6 Classes",
    "text": "Working with the OpenAI ChatGPT API in R using R6 Classes\nUnlike many examples you may come across online, this blog post does not demonstrate how to interact with the OpenAI ChatGPT API using a basic R script. Instead, I’ll demonstrate a more sophisticated and structured approach using R6 classes, highlighting how it can make your scripts cleaner, more organised, and more maintainable. \nMost tutorials tend to offer a script where the process is laid out step by step, usually in a single function or a few loosely related functions. Whilst this can work perfectly well for small scripts and quick projects, as your codebase grows this can lead to code that’s difficult to maintain and understand. That’s where the object-oriented paradigm and specifically R6 classes in R come in clutch.\nR6 classes are part of an R package that provides a modern, simple and clean approach to object-oriented programming in R. By encapsulating related data and methods inside classes, we can create code that’s easier to read, write, and debug. This in turn makes our work more reusable and modular.\nIn this post, we’re going to create two R6 classes: `MessageHistory` and `ChatGPT`.\nThe `MessageHistory` class will manage a list of chat messages. Each message will consist of a ‘role’ (i.e., whether it’s a user or bot message) and the ‘message’ content. The class will provide methods to add messages to the history and retrieve the last message by a given role.\nThe `ChatGPT` class will handle interactions with the OpenAI API. It will accept an API token and model upon initialisation and offer a chat method that will make the API request and return the response. Crucially, it will incorporate an instance of the `MessageHistory` class, demonstrating how different classes can be combined for more powerful and flexible code.\nBy encapsulating these distinct pieces of functionality within separate R6 classes, we ensure that our code is well-structured and clearly organised. Each class has a specific, well-defined responsibility, making it easier to understand what each part of our code does. Furthermore, our code becomes more modular, allowing different components to be reused or replaced without affecting the rest of the codebase.\nThis is a step towards more professional and efficient coding practices, helping you make the most of the power that the R language offers. Whether you’re a seasoned developer or new to R, I believe you’ll find this approach rewarding and valuable in your work.\nYou can follow along with the code at this GitHub repository.\n\n\n\n\n\n\nMessage History\n\n\n\nThe OpenAI ChatGPT API uses message history to maintain context for generating responses.\nIn an interactive chat setting, each message you send to the API should include both the message you want to generate a response to, as well as the conversation history. The conversation history usually includes alternating user and assistant messages. For example:\n'messages':[\n\n    {'role':'system', 'content':'You are a helpful assistant.'},\n    {'role':'user', 'content':'Who won Wimbledon singles in 2022?'},\n    {'role':'assistant', 'content':'Wimbledon was won by Elena Rybakina and Novak Djokovic in 2022.'},\n    {'role':'user', 'content':'What about the doubles?'}\n\n]\nIncluding the history allows the model to generate responses that are relevant and in context. Without the history, the model wouldn’t have enough information to provide accurate or coherent responses to user prompts.\nThe `MessageHistory` class in our example will handle this aspect. It maintains a list of messages (with the ‘role’ and ‘message’ attributes) in the conversation, thus helping the `ChatGPT` class manage the conversation context when making API requests."
  },
  {
    "objectID": "posts/chatgpt-in-r-using-r6-classes/index.html#introducing-the-messagehistory-class",
    "href": "posts/chatgpt-in-r-using-r6-classes/index.html#introducing-the-messagehistory-class",
    "title": "Working with the OpenAI ChatGPT API in R using R6 Classes",
    "section": "Introducing the MessageHistory Class",
    "text": "Introducing the MessageHistory Class\n\nLet’s begin our exploration of the OpenAI ChatGPT API using R6 classes in R with a detailed look at the first class we’re creating: `MessageHistory`. This class plays a pivotal role in maintaining the continuity of a conversation -context- when interacting with the API.\nThe `MessageHistory` class, as its name suggests, is responsible for handling the history of messages in our conversation with the ChatGPT model. It is designed to keep track of both the ‘role’ (whether it’s a user or bot message) and the ‘content’ of each message. By doing so, it allows us to retain context, ensuring the bot can respond appropriately to each user input.\n\nWhy MessageHistory is Necessary\nWhen conversing with the ChatGPT API, context is crucial. The API generates responses based on the conversation history you provide; it does not store any context or conversation history itself. Therefore, the responsibility falls on us to manage the context by supplying the message history each time we make a request to the API.\nThis is where our `MessageHistory` class steps in. By leveraging this class, we can efficiently manage our conversation history, providing the necessary context to the API for generating meaningful responses.\nThis class encapsulates all the functionalities we need to handle the conversation history and can be easily integrated with our `ChatGPT` class. It’s a perfect demonstration of how we can make our code cleaner and more organised by separating different aspects of our program into distinct R6 classes.\nBelow is a walkthrough of this class and its methods:\nlibrary(R6)\nlibrary(rlist)\n\n# Define the MessageHistory class\nMessageHistory &lt;- R6Class(\"MessageHistory\",\n                  private = list(\n                    # Private list that will contain the history of messages\n                    .history = list()\n                  ),\n                  public = list(\n                    # Public reference to the private .history list\n                    message_history = list(),\n                    \n                    # Constructor for the MessageHistory class which initialises the .history list\n                    initialize = function() {\n                      private$.history &lt;- list()\n                    },\n                    \n                    # Method to add a new message to the history.\n                    # The role and content of the message are passed as arguments.\n                    add_message = function(role, content) {\n                      private$.history &lt;- c(private$.history, list(list(role = role, content = content)))\n                    },\n                    \n                    # Method to return the full message history\n                    get_history = function() {\n                      return(private$.history)\n                    },\n                    \n                    # Method to return the last message from a given role.\n                    # The method iterates over the history from the end until it finds a message\n                    # from the specified role and then returns it.\n                    # If no message from the specified role is found, the method returns NULL.\n                    get_last_message = function(role) {\n                      for (i in length(private$.history):1) {\n                        if (private$.history[[i]]$role == role) {\n                          return(private$.history[[i]]$content)\n                        }\n                      }\n                      return(NULL)\n                    }\n                  )\n)\n\n\nPrivate Members\nWithin our `MessageHistory` class, we have a private member `.history`. This is a list that will store each message as an element. Each element is a list itself with two items: ‘role’ and ‘content’. It is marked as private to prevent it from being directly manipulated outside of the class methods.\n\n\nPublic Methods\n\n`initialize()`: This is the constructor for the `MessageHistory` class which is automatically called when a new instance of the class is created. It initializes the `.history` list to an empty list.\n`add_message(role, content)`: This method accepts two parameters - ‘role’ and ‘content’ - and appends them as a new list to the `.history` list. Each time a message is sent or received in the conversation, this method is used to add it to the history.\n`get_history()`: This method returns the entire `.history` list, providing a full record of the conversation when called.\n`get_last_message(role)`: This method retrieves the most recent message from a specified role. It iterates through the `.history` list backwards and returns the content of the first message it encounters from the specified role. If no such message exists, it returns NULL.\n\nIn the next section, we’ll explore the `ChatGPT` class and see how it utilises `MessageHistory` to communicate effectively with the OpenAI ChatGPT API."
  },
  {
    "objectID": "posts/intro-to-ml/index.html#i.-introduction",
    "href": "posts/intro-to-ml/index.html#i.-introduction",
    "title": "Small Business Intro to Machine Learning",
    "section": "I. Introduction",
    "text": "I. Introduction\nEver wondered what all the “Machine Learning” fuss is about?\nThis powerful technology can have a significant impact on small e-commerce businesses. In this article, we’ll explore how machine learning can boost your marketing and financial efforts without too much technical jargon."
  },
  {
    "objectID": "posts/intro-to-ml/index.html#ii.-machine-learning-in-marketing",
    "href": "posts/intro-to-ml/index.html#ii.-machine-learning-in-marketing",
    "title": "Small Business Intro to Machine Learning",
    "section": "II. Machine Learning in Marketing",
    "text": "II. Machine Learning in Marketing\nConnecting with your target audience is key when it comes to marketing. This is one area where machine learning can be your secret weapon.\nIn this section, we will uncover how machine learning supercharges personalised marketing campaigns. We will discuss spot-on product recommendations and tailored email strategies. We will also examine customer segmentation to help you identify high-value customers and create custom marketing approaches for diverse groups. To wrap up, we will touch on sentiment analysis and show you how to tap into customer feedback to polish your products and services. Fasten your seatbelts and let’s unlock the marketing prowess of machine learning!"
  },
  {
    "objectID": "posts/intro-to-ml/index.html#a.-personalised-marketing-campaigns",
    "href": "posts/intro-to-ml/index.html#a.-personalised-marketing-campaigns",
    "title": "Small Business Intro to Machine Learning",
    "section": "A. Personalised Marketing Campaigns",
    "text": "A. Personalised Marketing Campaigns\nAs an e-commerce entrepreneur, I’ve witnessed the impact of personalised marketing campaigns. Believe me, machine learning can elevate your campaigns like never before! Let’s explore two crucial areas where machine learning can work wonders.\n\n1. Product Recommendations\nEver been amazed by how online stores know just what you want? Machine learning (ML) makes it happen! It analyses customer behaviour, purchase history and browsing patterns to predict which products will interest each shopper. With machine learning, you can craft targeted product recommendations that make your customers feel valued and understood.\nYou’ve probably used a tool that recommends products from categories that you specify on your website backend. Notice how those recommendations aren’t actually smart? They’re usually just a random selection.\nWhen using ML you can change all that. Make the recommendations meaningful and relevant and you may actually create more revenue.\n\n\n2. Tailored Email Marketing\nNo-one enjoys generic spammy emails. No-one. Absolutely no-one. I’m sitting here on a public holiday and every marketer seems to have decided that today is the day they need to sell everything. Seriously, there’s nothing special about this public holiday. And yet I’m being informed of offers on washing machines, photocopiers, microscopes and a million other things I will not buy.\nMachine learning is here to save the day!\nBy grasping each customer’s preferences and interests, it assists in creating personalised email campaigns that truly resonate. Be it special offers, product launches or curated content, machine learning guarantees you hit the mark and keep customers engaged."
  },
  {
    "objectID": "posts/intro-to-ml/index.html#b.-customer-segmentation",
    "href": "posts/intro-to-ml/index.html#b.-customer-segmentation",
    "title": "Small Business Intro to Machine Learning",
    "section": "B. Customer Segmentation",
    "text": "B. Customer Segmentation\nSpeaking of keeping things relevant…\nE-commerce success relies on understanding customers. Machine learning helps you segment your customer base in unparalleled ways. Let’s see how it identifies high-value customers and crafts custom marketing approaches for diverse groups.\n\n1. Identifying High-Value Customers\nHigh-value customers fuel any business. Machine learning sorts through vast data to pinpoint these precious shoppers. It analyses factors such as:\n\nPurchase frequency\nOrder value\nEngagement\n\nIdentifying customers who generate the most revenue lets you concentrate marketing efforts effectively.\nVisit this article if you wish to try calculating CLV for yourself.\n\n\n2. Customising Marketing Strategies for Different Segments\nOne size doesn’t fit all in marketing. Machine learning segments your customer base based on factors like:\n\nDemographics\nShopping habits\nPreferences\n\nWith these insights at hand, you can develop tailored marketing strategies. Each group will resonate with the strategy. This leads to better engagement and conversions.\nInterested in segmentation? Explore over 20 different methods of segmenting your audience with a free MindMap. Don’t be limited to whatever segments your email platform gives you. If you want to stand out from the crowd then you need to try different strategies.\n\n\n3. Sentiment Analysis\nUnderstanding customer feedback is essential. Machine learning can assist in analysing sentiments and emotions in customer reviews, comments, and social media posts. Let’s explore how sentiment analysis can improve your products and services.\n\n1. Understanding Customer Feedback\nCustomers express their opinions online every day. Machine learning can make sense of this vast pool of data by analysing text and extracting meaningful insights. It identifies positive, negative, and neutral sentiments. This allows you to spot trends, gauge customer satisfaction, and address concerns promptly.\n\n\n2. Improving Products and Services\nArmed with insights from sentiment analysis, you can make informed decisions about your products and services. By identifying areas that need improvement or enhancement, you can take action to meet customer needs better. This leads to happier customers, increased loyalty, and ultimately more sales for your e-commerce business."
  },
  {
    "objectID": "posts/intro-to-ml/index.html#iii.-machine-learning-in-business-finance",
    "href": "posts/intro-to-ml/index.html#iii.-machine-learning-in-business-finance",
    "title": "Small Business Intro to Machine Learning",
    "section": "III. Machine Learning in Business Finance",
    "text": "III. Machine Learning in Business Finance\nMachine learning doesn’t just shine in marketing. It also offers significant advantages for managing your e-commerce business finances. Let’s delve into three areas where machine learning can improve financial performance.\n\nA. Fraud Detection and Prevention\nHonestly, financial tracking and fraud prevention is a huge effort for small businesses. The learning curve for a project of this type may be more than the average company owner can deal with.\nWhile chargebacks can be extremely time-consuming to deal with and prohibitively expensive if left unchecked, I’d recommend leaving this to the experts. Many banks and payment processors will offer some form of fraud detection if fraud is a problem for your business. Stripe Radar, for instance.\nHow do they do that? They use machine learning, of course!\nIt can help tackle this issue head-on by:\n\nAnalysing transaction data\nIdentifying suspicious patterns\nAlerting you to potential fraud risks\n\nWith real-time detection, you can take preventive measures to protect your business and your customers from financial loss.\n\n\nB. Forecasting and Inventory Management\nAccurate sales forecasting and inventory management are crucial to e-commerce success. Machine learning can predict future sales by:\n\nAnalysing historical data\nConsidering seasonal trends\nFactoring in market conditions\n\nThese predictions enable owners to optimise inventory levels, preventing stockouts and reducing storage costs.\n\n\nC. Optimising Pricing Strategies\nFinding the right price for your products can be challenging. Machine learning can assist in setting optimal prices by:\n\nAnalysing competitor pricing\nAssessing supply and demand dynamics\nEvaluating customer price sensitivity\n\nBy implementing dynamic pricing, you can maximise profit margins while remaining competitive in the market."
  },
  {
    "objectID": "posts/intro-to-ml/index.html#iv.-implementing-machine-learning-in-your-e-commerce-business",
    "href": "posts/intro-to-ml/index.html#iv.-implementing-machine-learning-in-your-e-commerce-business",
    "title": "Small Business Intro to Machine Learning",
    "section": "IV. Implementing Machine Learning in Your E-commerce Business",
    "text": "IV. Implementing Machine Learning in Your E-commerce Business\nNow that we’ve covered the benefits of machine learning for marketing and finance, let’s discuss how to implement it in your e-commerce business. Here are some steps to help you get started:\n\nA. Identify Your Needs\nBefore diving into machine learning, determine the specific areas where it can have the most significant impact on your business. This could be personalising marketing campaigns, improving customer segmentation, detecting fraud, or optimising pricing.\n\n\nB. Gather and Clean Data\nMachine learning relies on data. Ensure you have access to relevant data sources and that the data is clean and well-structured. This may involve data cleaning, removing duplicates, and filling in missing values.\n\n\nC. Choose the Right Tools and Platforms\nThere are numerous machine learning tools and platforms available, catering to different skill levels and requirements. Some popular options include:\n\nTensorFlow\nscikit-learn\nMicrosoft Azure Machine Learning\nGoogle Cloud ML Engine\n\n\nEvaluate the pros and cons of each tool, and select the one that aligns with your needs and technical expertise.\n\n\nD. Build or Outsource\nDecide whether to build your machine learning models in-house or outsource to experts. Building in-house requires a skilled team and can be time-consuming. Outsourcing may be a more efficient option, but it’s essential to find a reliable partner who understands your business needs.\n\n\nE. Monitor and Update\nOnce your machine learning models are in place, keep an eye on their performance. Regularly update and fine-tune the models to ensure they remain accurate and effective in meeting your business goals.\nBy following these steps, you can successfully harness the power of machine learning to grow your e-commerce business and stay ahead of the competition.\nMachine learning offers immense potential for e-commerce businesses, revolutionising marketing and finance management. By leveraging machine learning, you can deliver personalised customer experiences, optimise pricing strategies, detect fraud, and make better-informed business decisions.\nTo implement machine learning successfully in your e-commerce business, it’s crucial to:\n\nIdentify your specific needs\nGather and clean relevant data\nChoose the right tools and platforms\nDecide whether to build in-house or outsource\nContinuously monitor and update your models\n\nBy embracing machine learning and its benefits, you can gain a competitive edge and drive your e-commerce business towards long-term success. Why wait? Start exploring the world of machine learning today and unlock the untapped potential of your business."
  },
  {
    "objectID": "posts/identify-most-valuable-customers/index.html",
    "href": "posts/identify-most-valuable-customers/index.html",
    "title": "Making the most of customer relationships with CLV",
    "section": "",
    "text": "CLV leads businesses to the most valuable customers, those who will continue to spend money with them for years to come. By understanding how much these customers are worth over time, businesses can create strategies to keep them happy and engaged, and prevent them from jumping ship to the competition."
  },
  {
    "objectID": "posts/identify-most-valuable-customers/index.html#introduction",
    "href": "posts/identify-most-valuable-customers/index.html#introduction",
    "title": "Making the most of customer relationships with CLV",
    "section": "Introduction",
    "text": "Introduction\n\nMaking the most of customer relationships with CLV\nAs a data scientist working in the e-commerce industry, you possess the unique ability to turn raw data into meaningful insights that can drive business growth. One area where your expertise can have a significant impact is in understanding and predicting Customer Lifetime Value (CLV).\nIn today’s fast-paced and competitive e-commerce landscape, developing strategies that make the most of customer relationships is crucial to long-term success. By harnessing the power of CLV, you can help businesses better target their marketing efforts, retain loyal customers, and ultimately increase overall revenue.\nIn this blog post, I will guide you step-by-step through the process of measuring and predicting CLV, ensuring you have the tools and knowledge needed to become a valuable asset in the e-commerce industry. Our approach will be informative, practical, and designed to cater to your analytical mindset, providing you with a comprehensive understanding of the techniques and methodologies involved in CLV analysis.\nJoin me on this journey into the realm of customer loyalty, as I equip you with the skills needed to master CLV and contribute to the sustainable growth and success of any e-commerce business."
  },
  {
    "objectID": "posts/identify-most-valuable-customers/index.html#in-the-beginning",
    "href": "posts/identify-most-valuable-customers/index.html#in-the-beginning",
    "title": "Making the most of customer relationships with CLV",
    "section": "1. In the beginning…",
    "text": "1. In the beginning…\nAs ever, the best way to start is to install the necessary packages. CLVTools1 is where it’s at. You know the drill.\n\nlibrary(CLVTools)\n\nThe next step is to load the transaction data which has been formatted to show a purchase date and customer ID in every row. At this point a transaction cost isn’t necessary but I have yet to find a store owner who provided transaction data without price values. Price is optional here. However, when provided, this variable will allow prediction of future spending. I’ll cover that here in this post when I delve into the predictive side of CLV.\n\ntransactions &lt;- read.csv(\"./data/transactions.csv\")\n\nhead(transactions)\n\n  Id       Date  Price\n1  1 2017-01-12  20.86\n2  2 2016-12-31  51.18\n3  2 2016-12-31  44.00\n4  3 2016-12-31 102.87\n5  4 2017-01-12  43.80\n6  4 2017-02-08  10.50\n\n\nAs you can see, there’s one observation per transaction and customer ID will be repeated for multiple transactions."
  },
  {
    "objectID": "posts/identify-most-valuable-customers/index.html#create-a-clv.data-object",
    "href": "posts/identify-most-valuable-customers/index.html#create-a-clv.data-object",
    "title": "Making the most of customer relationships with CLV",
    "section": "2. Create a clv.data object",
    "text": "2. Create a clv.data object\nCreating a Customer Lifetime Value (CLV) data object is straightforward but it helps to know a little of the intricacies. The process involves splitting the transaction data into estimation and holdout samples using the estimation.split parameter.\nIn the example below I’ve set the estimation.split to be 39 weeks. The first 39 weeks of data will be used to create the estimation sample while the remaining data becomes the holdout sample.\n\n# Create a CLV data object, split data into estimation and holdout samples\nclv.trans &lt;- clvdata(data.transactions = transactions, \n                     date.format = \"ymd\",\n                     time.unit = \"week\", \n                     estimation.split = 39, \n                     name.id = \"Id\")\n\n\n\n\n\n\n\nEstimation & Holdout\n\n\n\n\nEstimation sample: This sample is used to estimate the parameters of the CLV model. It’s the portion of data on which the model is trained and built.\nHoldout sample: This sample is used to evaluate the performance and accuracy of the CLV model. It’s the portion of data that the model has not seen during the estimation process and acts as a validation set.\n\n\n\nHow did I decide that 39 weeks is the right value to use? It’s a ‘best guess’. To decide on a good value for estimation.split means looking at the data, the business and the business goals. Here’s a few factors to consider:\n\nData availability: The estimation.split value should be chosen such that there is sufficient data available for both the estimation and holdout samples. A larger dataset usually allows for a more robust model with more accurate validation.\nSeasonality and trends: Is the business seasonal, with seasonal patterns or trends? If so, it’s crucial to ensure that the estimation and holdout samples capture these variations. Doing so may require selecting an estimation.split value that includes multiple cycles of seasonality.\nModel stability: A good estimation.split value should result in a model that is stable and reliable. I can assess this by comparing model performance across different split values and selecting the one that yields the most consistent and accurate results.\n\nWhile the algorithm can handle some inaccuracy when setting the estimation.split value, the more accurate it is to start with, the better the results will be. Of course, better results at this point will mean a more accurate model and improved decision-making and business outcomes. While there are methods to mitigate the effects of inaccurate estimate.split values, in my experience it’s just good practice to get it right first time and avoid messing around with other metrics such as mean squared error, mean absolute error, or root mean squared error later.\n\n# summary of data\nsummary(clv.trans)\n\nCLV Transaction Data \n                                \nTime unit         Weeks         \nEstimation length 39.0000 Weeks \nHoldout length    40.71429 Weeks\n\nTransaction Data Summary \n                                   Estimation      Holdout         Total     \nNumber of customers                -               -               263       \nFirst Transaction in period        2016-12-31      2017-10-01      2016-12-31\nLast Transaction in period         2017-09-30      2018-07-13      2018-07-13\nTotal # Transactions               1293            976             2269      \nMean # Transactions per cust       4.916           8.342           8.627     \n(SD)                               5.792           9.094           12.353    \nMean Spending per Transaction      39.713          38.989          39.401    \n(SD)                               42.253          58.977          50.124    \nTotal Spending                     51348.290       38053.580       89401.870 \nTotal # zero repeaters             87              -               -         \nPercentage of zero repeaters       33.080          -               -         \nMean Interpurchase time            7.308           5.447           9.403     \n(SD)                               6.767           5.432           12.197    \n\n\nI’ve been provided with data for 263 customers and 2269 transactions. Just over 33% are zero-repeaters that is, customers who purchased once but have not returned since. The mean spending per transaction was £39.71 in the estimation period and £38.99 in the holdout period. Overall mean spending per transaction was £39.40. I already have some valuable insights into customer behaviour and spending patterns but I can take this further. Much further."
  },
  {
    "objectID": "posts/identify-most-valuable-customers/index.html#fit-a-paretonbd-model",
    "href": "posts/identify-most-valuable-customers/index.html#fit-a-paretonbd-model",
    "title": "Making the most of customer relationships with CLV",
    "section": "3. Fit a Pareto/NBD model",
    "text": "3. Fit a Pareto/NBD model\nNow I have my clvdata() object, I can estimate a model using the standard Pareto/NBD model. For this I will use the the pnbd() command and pass it the object created in the previous step as the first argument. Starting values for model parameters are provided using the arguments start.params.model with a vector of values. I find that this can be useful if prior knowledge on distribution parameters is available but I don’t worry too much if I can’t be accurate. While these initial values impact the convergence of the model fitting process, they are simply best guesses. in practice,\n\n\n\n\n\n\nTip\n\n\n\nI find it can be challenging to obtain accurate starting values. The defaults often work well enough in many scenarios.\n\n\n\n# PNBD model fit on the first 39 periods\npnbd.trans &lt;- pnbd(clv.trans,\n                   start.params.model = c(r=0.5, alpha=8, s=0.5, beta=10))\n\nStarting estimation...\n\n\nEstimation finished!\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe start.params.model parameters are as follows:\n\nr\n\nShape parameter for the Gamma distribution of the transaction rate (𝛌)\n\nalpha\n\nScale parameter for the Gamma distribution of the transaction rate (𝛌)\n\ns\n\nShape parameter for the Gamma distribution of the lifetime (𝜇)\n\nbeta\n\nScale parameter for the Gamma distribution of the lifetime (𝜇)\n\n\nThe values you and I provide for these parameters will serve as the starting point for the estimation process. The optimisation algorithm will iterate from these starting values to find the best-fitting parameters for the data so don’t be too concerned about calculating them accurately beforehand.\n\n\n\n# Plot the fitted model to the actual repeat transactions\nplot(pnbd.trans)\n\nPlotting from 2016-12-31 until 2018-07-15.\n\n\n\n\n\nThe tracking plot is the default option when plotting the fitted model. It shows the repeated transactions by real customers against the models’ predicted transactions.\nOverall it doesn’t look too bad. There’s a peak of repeated transactions at the end of 2017 and the beginning of 2018 but I suspect this could be due to the festive holiday and the related Christmas madness. It doesn’t look unusual to me and I will mark it down as ‘seasonality’ and shrug it off after confirming with the business owner."
  },
  {
    "objectID": "posts/identify-most-valuable-customers/index.html#interpreting-the-model",
    "href": "posts/identify-most-valuable-customers/index.html#interpreting-the-model",
    "title": "Making the most of customer relationships with CLV",
    "section": "4. Interpreting the model",
    "text": "4. Interpreting the model\n\n# inspect fit\nsummary(pnbd.trans)\n\nPareto NBD Standard  Model \n\nCall:\npnbd(clv.data = clv.trans, start.params.model = c(r = 0.5, alpha = 8, \n    s = 0.5, beta = 10))\n\nFitting period:                               \nEstimation start  2016-12-31   \nEstimation end    2017-09-30   \nEstimation length 39.0000 Weeks\n\nCoefficients:\n      Estimate Std. Error z-val Pr(&gt;|z|)    \nr       0.7513     0.1260 5.961 2.50e-09 ***\nalpha   5.2628     0.8871 5.932 2.99e-09 ***\ns       0.3730     0.1895 1.969    0.049 *  \nbeta   11.0325    10.0368 1.099    0.272    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nOptimization info:                 \nLL     -2828.5777\nAIC    5665.1553 \nBIC    5679.4439 \nKKT 1  TRUE      \nKKT 2  TRUE      \nfevals 17.0000   \nMethod L-BFGS-B  \n\nUsed Options:                 \nCorrelation FALSE\n\n\nNow I see the r, alpha, s and beta that the algorithm arrived at. From these I can derive a couple of important pieces of info:\n\nAverage purchase rate (𝑟/⍺) = 0.143 transactions\nAverage attrition rate (𝒔/𝞫) = 0.034 per customer per week\nOptimisation criteria were met. KKT1 & 2 are TRUE.\n\nSo that’s nice. Let’s go further still and to some more juicy, predictive analytics!"
  },
  {
    "objectID": "posts/identify-most-valuable-customers/index.html#get-predictive",
    "href": "posts/identify-most-valuable-customers/index.html#get-predictive",
    "title": "Making the most of customer relationships with CLV",
    "section": "5. Get predictive!",
    "text": "5. Get predictive!\n\nprediction.trans &lt;- predict(pnbd.trans)\n\nPredicting from 2017-10-01 until (incl.) 2018-07-13 (40.86 Weeks).\n\n\nEstimating gg model to predict spending...\n\n\nStarting estimation...\n\n\nEstimation finished!\n\nhead(prediction.trans)\n\n     Id period.first period.last period.length actual.x actual.total.spending\n1:    1   2017-10-01  2018-07-13      40.85714        0                  0.00\n2:   10   2017-10-01  2018-07-13      40.85714        0                  0.00\n3:  100   2017-10-01  2018-07-13      40.85714       23                750.27\n4: 1000   2017-10-01  2018-07-13      40.85714       24               1116.87\n5: 1001   2017-10-01  2018-07-13      40.85714       11                369.60\n6: 1002   2017-10-01  2018-07-13      40.85714        0                  0.00\n       PAlive        CET       DERT predicted.mean.spending predicted.CLV\n1: 0.36160395  0.2305102 0.05989818                40.25354      2.411114\n2: 0.04368167  0.1111880 0.02900386                35.55456      1.031220\n3: 0.94346385 12.3342954 3.22145319                46.68502    150.393616\n4: 0.98009916 12.6347184 3.27800310                42.40391    139.000145\n5: 0.54793815  3.9244903 1.01818583                46.15505     46.994418\n6: 0.42913180  1.3175031 0.34181840                37.16120     12.702380\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nCET\n\nConditional Expected Transactions is the number of transactions to expect from a customer during the prediction period\n\nPAlive\n\nProbability of a customer being alive (active) at the end of the estimation period\n\nDERT\n\nDiscounted Expected Residual Transactions is the total number of transactions for the remaining (residual) lifetime of a customer discounted to the end of the estimation period\n\nactual.predicted.mean.spending\n\nPredicted mean spending estimated by the Gamma/Gamma model\n\nactual.𝔁\n\nthe number of actual transactions\n\nactual.total.spending\n\nthe true spending amount\n\nCLV\n\nCalculated as the product of DERT and predicted spending\n\n\n\n\nAnd there we have it. A predicted value for the amount of money a customer is expected to spend over the course of their relationship with a business. Adding covariates to the predictive model could be a useful next step. I’ll save that task for another post."
  },
  {
    "objectID": "posts/identify-most-valuable-customers/index.html#conclusion",
    "href": "posts/identify-most-valuable-customers/index.html#conclusion",
    "title": "Making the most of customer relationships with CLV",
    "section": "6. Conclusion",
    "text": "6. Conclusion\nBy measuring CLV, the the analyst is able to help the business owner to identify their most valuable customers and implement targeted marketing campaigns to retain customer loyalty and increase overall revenue. Owners may also discover that it is more cost-effective to retain existing customers than to acquire new ones, which leads to a shift in their marketing strategy. By measuring CLV, the business owner is able to make more informed decisions that positively impact their bottom line\nMeasuring CLV should be a critical component of any e-commerce business’ marketing strategy. However, many small businesses neglect this simple step and fail to segment their marketing accordingly. By understanding the value of their customers over time, businesses can better target their marketing efforts, retain loyal customers, and increase overall revenue. CLV analysis is a powerful tool that can help businesses make more informed decisions and stay competitive in a crowded marketplace."
  },
  {
    "objectID": "posts/identify-most-valuable-customers/index.html#footnotes",
    "href": "posts/identify-most-valuable-customers/index.html#footnotes",
    "title": "Making the most of customer relationships with CLV",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://cran.r-project.org/web/packages/CLVTools/index.html↩︎"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "I’m a data science professional with a unique blend of skills and experience. With a background in biostatistics, psychology, and ecommerce, I have a well-rounded perspective on data analysis and its application in real-world settings. I believe in leveraging my skills to create impact for my clients and am passionate about helping businesses make data-driven decisions.\nAre you looking to take your data strategy to the next level? Contact me for a chat! I offer a free consultation to discuss your needs and see how I can help."
  },
  {
    "objectID": "about.html#mark-vanderstay",
    "href": "about.html#mark-vanderstay",
    "title": "About Me",
    "section": "",
    "text": "I’m a data science professional with a unique blend of skills and experience. With a background in biostatistics, psychology, and ecommerce, I have a well-rounded perspective on data analysis and its application in real-world settings. I believe in leveraging my skills to create impact for my clients and am passionate about helping businesses make data-driven decisions.\nAre you looking to take your data strategy to the next level? Contact me for a chat! I offer a free consultation to discuss your needs and see how I can help."
  },
  {
    "objectID": "about.html#education-experience",
    "href": "about.html#education-experience",
    "title": "About Me",
    "section": "Education & Experience",
    "text": "Education & Experience\nMSc in Psychology Research Methods and many years experience in biostatistics.\nKlaviyo Partner\nMailChimp Certified\nGA4 Certified\nSAS, R, Python, C#, Ruby"
  },
  {
    "objectID": "about.html#contact",
    "href": "about.html#contact",
    "title": "About Me",
    "section": "Contact",
    "text": "Contact\nYou can find me on Twitter and LinkedIn.\nSend me an email.\nCheck out more R posts on R-Bloggers.com"
  },
  {
    "objectID": "intro-to-ml.html",
    "href": "intro-to-ml.html",
    "title": "Introduction to Machine Learning for Business: Marketing and Finance for E-commerce Entrepreneurs",
    "section": "",
    "text": "Introduction to Machine Learning for Business: Marketing and Finance for E-commerce Entrepreneurs\nEver wondered how “machine learning” could boost your e-commerce business? You’re in the right place! Join me as we explore this thrilling world and reveal its transformative power for your online store.\nNavigating the competitive e-commerce landscape, small businesses like yours need agility and innovation. That’s where machine learning shines. This remarkable AI branch allows computers to learn from data without our intervention, redefining your business by uncovering hidden patterns, anticipating customer desires, and fine-tuning operations.\nIn this article series, I’ll share my own machine learning adventures and demonstrate how unlocking its potential can help you create tailored shopping experiences, turbocharge your marketing, and optimise your financial strategies. So, let’s embark on this exhilarating journey and conquer machine learning for your e-commerce business, together!"
  },
  {
    "objectID": "intro-to-ml.html#ii.-machine-learning-in-marketing",
    "href": "intro-to-ml.html#ii.-machine-learning-in-marketing",
    "title": "Introduction to Machine Learning for Business: Marketing and Finance for E-commerce Entrepreneurs",
    "section": "II. Machine Learning in Marketing",
    "text": "II. Machine Learning in Marketing\n\n\nReady for a deep dive into the most exhilarating machine learning applications for e-commerce businesses? Marketing, of course! Connecting with your target audience is key and machine learning can be your secret weapon.\nIn this section, we will uncover how machine learning supercharges personalised marketing campaigns. We will discuss spot-on product recommendations and tailored email strategies. We will also examine customer segmentation to help you identify high-value customers and create custom marketing approaches for diverse groups. To wrap up, we will touch on sentiment analysis and show you how to tap into customer feedback to polish your products and services. Fasten your seatbelts and let’s unlock the marketing prowess of machine learning!"
  },
  {
    "objectID": "intro-to-ml.html#a.-personalised-marketing-campaigns",
    "href": "intro-to-ml.html#a.-personalised-marketing-campaigns",
    "title": "Introduction to Machine Learning for Business: Marketing and Finance for E-commerce Entrepreneurs",
    "section": "A. Personalised Marketing Campaigns",
    "text": "A. Personalised Marketing Campaigns\nAs an e-commerce entrepreneur, I’ve witnessed the impact of personalised marketing campaigns. Believe me, machine learning can elevate your campaigns like never before! Let’s explore two crucial areas where machine learning can work wonders.\n\n1. Product Recommendations\nEver been amazed by how online stores know just what you want? Machine learning makes it happen! It analyses customer behaviour, purchase history and browsing patterns to predict which products will interest each shopper. With machine learning, you can craft targeted product recommendations that make your customers feel valued and understood.\n\n\n2. Tailored Email Marketing\nNo one enjoys generic spammy emails. Machine learning is here to save the day! By grasping each customer’s preferences and interests, it assists in creating personalised email campaigns that truly resonate. Be it special offers, product launches or curated content, machine learning guarantees you hit the mark and keep customers engaged."
  },
  {
    "objectID": "intro-to-ml.html#b.-customer-segmentation",
    "href": "intro-to-ml.html#b.-customer-segmentation",
    "title": "Introduction to Machine Learning for Business: Marketing and Finance for E-commerce Entrepreneurs",
    "section": "B. Customer Segmentation",
    "text": "B. Customer Segmentation\nE-commerce success relies on understanding customers. Machine learning helps you segment your customer base in unparalleled ways. Let’s see how it identifies high-value customers and crafts custom marketing approaches for diverse groups.\n\n1. Identifying High-Value Customers\nHigh-value customers fuel any business. Machine learning sorts through vast data to pinpoint these precious shoppers. It analyses factors such as:\n\nPurchase frequency\nOrder value\nEngagement\n\nIdentifying customers who generate the most revenue lets you concentrate marketing efforts effectively.\n\n\n2. Customising Marketing Strategies for Different Segments\nOne size doesn’t fit all in marketing. Machine learning segments your customer base based on factors like:\n\nDemographics\nShopping habits\nPreferences\n\nWith these insights at hand, you can develop tailored marketing strategies. Each group will resonate with the strategy. This leads to better engagement and conversions.\n\n\n3. Sentiment Analysis\nUnderstanding customer feedback is essential. Machine learning can assist in analysing sentiments and emotions in customer reviews, comments, and social media posts. Let’s explore how sentiment analysis can improve your products and services.\n\n1. Understanding Customer Feedback\nCustomers express their opinions online every day. Machine learning can make sense of this vast pool of data by analysing text and extracting meaningful insights. It identifies positive, negative, and neutral sentiments. This allows you to spot trends, gauge customer satisfaction, and address concerns promptly.\n\n\n\n\n2. Improving Products and Services\nArmed with insights from sentiment analysis, you can make informed decisions about your products and services. By identifying areas that need improvement or enhancement, you can take action to meet customer needs better. This leads to happier customers, increased loyalty, and ultimately more sales for your e-commerce business."
  },
  {
    "objectID": "intro-to-ml.html#iii.-machine-learning-in-business-finance",
    "href": "intro-to-ml.html#iii.-machine-learning-in-business-finance",
    "title": "Introduction to Machine Learning for Business: Marketing and Finance for E-commerce Entrepreneurs",
    "section": "III. Machine Learning in Business Finance",
    "text": "III. Machine Learning in Business Finance\nMachine learning doesn’t just shine in marketing. It also offers significant advantages for managing your e-commerce business finances. Let’s delve into three areas where machine learning can improve financial performance.\n\nA. Fraud Detection and Prevention\nOnline fraud is a massive problem for e-commerce businesses. Machine learning can help you tackle this issue head-on by:\n\nAnalysing transaction data\nIdentifying suspicious patterns\nAlerting you to potential fraud risks\n\nWith real-time detection, you can take preventive measures to protect your business and your customers from financial loss.\n\n\nB. Forecasting and Inventory Management\nAccurate sales forecasting and inventory management are crucial to e-commerce success. Machine learning can predict future sales by:\n\nAnalysing historical data\nConsidering seasonal trends\nFactoring in market conditions\n\nThese predictions enable you to optimise your inventory levels, preventing stockouts and reducing storage costs.\n\n\nC. Optimising Pricing Strategies\nFinding the right price for your products can be challenging. Machine learning can assist in setting optimal prices by:\n\nAnalysing competitor pricing\nAssessing supply and demand dynamics\nEvaluating customer price sensitivity\n\nBy implementing dynamic pricing, you can maximise profit margins while remaining competitive in the market.\n## IV. Implementing Machine Learning in Your E-commerce Business\n\n\nNow that we’ve covered the benefits of machine learning for marketing and finance, let’s discuss how to implement it in your e-commerce business. Here are some steps to help you get started:\n\n\n### A. Identify Your Needs\n\n\nBefore diving into machine learning, determine the specific areas where it can have the most significant impact on your business. This could be personalising marketing campaigns, improving customer segmentation, detecting fraud, or optimising pricing.\n\n\n### B. Gather and Clean Data\n\n\nMachine learning relies on data. Ensure you have access to relevant data sources and that the data is clean and well-structured. This may involve data cleaning, removing duplicates, and filling in missing values.\n\n\n### C. Choose the Right Tools and Platforms\n\n\nThere are numerous machine learning tools and platforms available, catering to different skill levels and requirements. Some popular options include:\n\n\n- TensorFlow\n- scikit-learn\n- Microsoft Azure Machine Learning\n- Google Cloud ML Engine\n\n\nEvaluate the pros and cons of each tool, and select the one that aligns with your needs and technical expertise.\n\n\n### D. Build or Outsource\n\n\nDecide whether to build your machine learning models in-house or outsource to experts. Building in-house requires a skilled team and can be time-consuming. Outsourcing may be a more efficient option, but it’s essential to find a reliable partner who understands your business needs.\n\n\n### E. Monitor and Update\n\n\nOnce your machine learning models are in place, keep an eye on their performance. Regularly update and fine-tune the models to ensure they remain accurate and effective in meeting your business goals.\n\n\nBy following these steps, you can successfully harness the power of machine learning to grow your e-commerce business and stay ahead of the competition.\n\n\n\nMachine learning offers immense potential for e-commerce businesses, revolutionising marketing and finance management. By leveraging machine learning, you can deliver personalised customer experiences, optimise pricing strategies, detect fraud, and make better-informed business decisions.\nTo implement machine learning successfully in your e-commerce business, it’s crucial to:\n\nIdentify your specific needs\nGather and clean relevant data\nChoose the right tools and platforms\nDecide whether to build in-house or outsource\nContinuously monitor and update your models\n\nBy embracing machine learning and its benefits, you can gain a competitive edge and drive your e-commerce business towards long-term success. So, why wait? Start exploring the world of machine learning today and unlock the untapped potential of your business!"
  },
  {
    "objectID": "posts/chatgpt-in-r-using-r6-classes/index.html#diving-into-the-chatgpt-class",
    "href": "posts/chatgpt-in-r-using-r6-classes/index.html#diving-into-the-chatgpt-class",
    "title": "Working with the OpenAI ChatGPT API in R using R6 Classes",
    "section": "Diving into the ChatGPT Class",
    "text": "Diving into the ChatGPT Class\nContinuing our exploration, we come across the main character in our R script: the `ChatGPT` class. This class is responsible for interacting with the OpenAI ChatGPT API, processing the user’s messages and returning the model’s responses. The class structure aids in maintaining an organised, efficient, and sustainable codebase.\nlibrary(R6)\nlibrary(httr)\nlibrary(jsonlite)\nsource(\"./classes/MessageHistory.R\")\n\n# Define the ChatGPT class\nChatGPT &lt;- R6Class(\"ChatGPT\",\n                   private = list(\n                     # Private string that will store the API token\n                     .api_token = NULL,  \n                     # Private string that will store the model name\n                     .model = NULL,  \n                     # API endpoint\n                     .url = \"https://api.openai.com/v1/chat/completions\",  \n                     # Instance of the MessageHistory class to store messages\n                     .message_list = NULL,  \n                     \n                     # Private method to generate the headers for the HTTP request\n                     get_headers = function() {\n                       httr::add_headers(\n                         \"Content-Type\" = \"application/json\",\n                         \"Authorization\" = paste(\"Bearer\", private$.api_token)\n                       )\n                     }\n                   ),\n                   \n                   public = list(\n                     # Public object to store the raw response from the API\n                     response = NULL,  \n                     \n                     # Constructor for the ChatGPT class\n                     initialize = function(api_token, model) {\n                       private$.api_token &lt;- api_token\n                       private$.model &lt;- model\n                       private$.message_list &lt;- MessageHistory$new()\n                     },\n                     \n                     # Method to send a message to the API and get a response\n                     chat = function(message) {\n                       \n                       # Add user message to the message list\n                       private$.message_list$add_message(\"user\", message)\n                       \n                       # Prepare the body for the API request\n                       body &lt;- list(\n                         \"model\" = private$.model,\n                         \"messages\" = private$.message_list$get_history()\n                       )\n                       \n                       # Send the API request and store the response\n                       self$response &lt;- POST(private$.url, private$get_headers(), body = toJSON(body, auto_unbox = TRUE), encode = \"json\")\n                       \n                       # Extract the assistant's message from the response\n                       content &lt;- content(self$response, \"parsed\")\n                       \n                       # Add the assistant's response to our message list\n                       private$.message_list$add_message(\"assistant\", content$choices[[1]]$message$content)\n                       \n                       # Return the assistant's message\n                       return(content$choices[[1]]$message$content)\n                     },\n                     \n                     # Method to retrieve the conversation history\n                     history = function(){\n                       return(private$.message_list$get_history())\n                     }\n                   )\n)\nLet’s break down this class to understand its components:\n\nPrivate Members\nIn the `ChatGPT` class, we have private members for the API token, model name, API URL, and an instance of the `MessageHistory` class (`message_list`). These variables are marked private to protect them from direct external manipulation, a feature that helps to maintain data integrity. We also have a private method (`get_headers()`) which generates the headers required for the API request.\n\n\nPublic Methods\n\n`initialize(api_token, model)`: The constructor of the `ChatGPT` class which sets the API token, model name and initializes the `message_list`.\n`chat(message)`: This method takes in a user’s message, adds it to the conversation history, sends the entire conversation history to the API, adds the model’s response to the conversation history, and then returns the model’s message. This is the heart of the class where the main interaction with the API happens.\n`history()`: This method returns the full conversation history, providing transparency and the ability to review the conversation as needed."
  },
  {
    "objectID": "posts/chatgpt-in-r-using-r6-classes/index.html#the-power-of-using-classes-over-simple-scripts",
    "href": "posts/chatgpt-in-r-using-r6-classes/index.html#the-power-of-using-classes-over-simple-scripts",
    "title": "Working with the OpenAI ChatGPT API in R using R6 Classes",
    "section": "The Power of Using Classes Over Simple Scripts",
    "text": "The Power of Using Classes Over Simple Scripts\nYou may wonder why I chose to design this interaction as an R6 class rather than writing a simple script to handle API calls. Here are four good reasons:\n\nEncapsulation: By defining a class, we encapsulate related data and operations into a single entity. In our case, all operations related to the ChatGPT model (like setting the API token, sending a message, and getting the history) are part of the same `ChatGPT` class. This makes the code easier to understand, manage, and debug.\nCode reusability and modularity: Once the `ChatGPT` class is defined, it can be easily reused in any other part of your code or even in different projects. You just need to create a new instance of the class, and all methods and properties are readily available.\nData integrity: Using classes and private members, we ensure data safety. For instance, direct modification of the API token or the message list is not allowed, thus preventing unintentional or malicious alterations.\nCode expansion: As new features or changes come to the API, adapting your code becomes a breeze. You just need to modify your class definition without impacting the rest of your code. This is particularly beneficial for larger projects or when working in a team.\n\nSo the `ChatGPT` class empowers us to interact with the OpenAI API in an organised, scalable, and secure manner. The combination of `ChatGPT` and `MessageHistory` classes provides an excellent example of how we can use object-oriented programming concepts in R to interact with an API like ChatGPT. \nIn the next section, I’ll show you how to create an instance of this class and interact with it, bringing these concepts together into a complete and functional example."
  },
  {
    "objectID": "posts/chatgpt-in-r-using-r6-classes/index.html#putting-it-all-together-an-example",
    "href": "posts/chatgpt-in-r-using-r6-classes/index.html#putting-it-all-together-an-example",
    "title": "Working with the OpenAI ChatGPT API in R using R6 Classes",
    "section": "Putting It All Together: An Example",
    "text": "Putting It All Together: An Example\nNow that we have our `MessageHistory` and `ChatGPT` classes, let’s put them to use. The following is an example of how to create an instance of `ChatGPT` and interact with it:\n# Load necessary libraries\n\nlibrary(R6)\nsource(\"./classes/MessageHistory.R\")\nsource(\"./classes/ChatGPT.R\")\n\n# Create an instance of the ChatGPT class\nchat_instance &lt;- ChatGPT$new(api_token = Sys.getenv(\"&lt;YOUR_API_TOKEN&gt;\"), model = \"gpt-3.5-turbo-0301\")\n\n# Send a message and get a response\nresponse &lt;- chat_instance$chat(\"Tell me a joke.\")\nprint(response) # The model's response will be printed\n\n# Send another message and get a response\nresponse &lt;- chat_instance$chat(\"Tell me another joke.\")\nprint(response) # The model's response will be printed\n\n# Print the entire conversation history\nhistory &lt;- chat_instance$history()\nprint(history) # The conversation history will be printed\nFirst, we create an instance of the `ChatGPT` class by calling `ChatGPT$new()`, passing the API token and model name as arguments. This instance gives us access to the `chat()` and `history()` methods of the `ChatGPT` class. I’ve stored my API token in an `.Renviron` file and passed it in via `Sys.getenv` to avoid comitting it to GitHub.\nWe use `chat()` to send messages to the API and get responses. In this example, we’ve asked for a joke and the model’s response is printed. We then ask for another joke, and again the model’s response is printed.\n\nFinally, we call `history()` to retrieve the entire conversation history, which we print out.\n\nThis example illustrates how our classes encapsulate functionality and data into reusable and understandable blocks. We could extend this basic interaction, for example, by creating a loop to continue the conversation for a set number of turns, or by adding error handling to ensure the program behaves gracefully if something unexpected occurs.\nThese classes provide a solid foundation on which to build a range of applications that interact with the ChatGPT API, while maintaining a clear, organised code structure. This structured approach is one of the many advantages of using R6 classes in R and demonstrates how they can be used to simplify interactions with APIs like OpenAI’s ChatGPT.\nNext time you’re considering using a script to interact with an API, consider using R6 classes instead. They offer many benefits that can make your code clearer, more maintainable, and more robust."
  },
  {
    "objectID": "index.html#machine-learning-for-business",
    "href": "index.html#machine-learning-for-business",
    "title": "markvanderstay.com",
    "section": "Machine Learning for Business",
    "text": "Machine Learning for Business\nValuable insights and guidance for business owners keen to take advantage of machine learning.\n\n\n\n\n\n\n\n\nSmall Business Intro to Machine Learning\n\n\n\n\n\n\nMark Vanderstay\n\n\nMay 1, 2023\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\nAll Posts"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "markvanderstay.com",
    "section": "",
    "text": "All Posts\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nWorking with the OpenAI ChatGPT API in R using R6 Classes\n\n\n22 min\n\n\n\nR6\n\n\nR\n\n\nChatGPT\n\n\n\n\n\n\n\nJul 7, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nSmall Business Intro to Machine Learning\n\n\n8 min\n\n\n\nML\n\n\n\n\n\n\n\nMay 1, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nMaking the most of customer relationships with CLV\n\n\n9 min\n\n\n\nCLV\n\n\nR\n\n\n\n\n\n\n\nApr 17, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nViewing Twitter Influence With Network Graphs\n\n\n10 min\n\n\n\nCLV\n\n\nR\n\n\n\n\n\n\n\nApr 3, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSentiment Analysis Of Twitter Data With R\n\n\n7 min\n\n\n\nTwitter\n\n\nR\n\n\n\n\n\n\n\nMar 28, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLDA With R Makes Twitter Data Insights Easy\n\n\n15 min\n\n\n\nTwitter\n\n\nR\n\n\nRStudio\n\n\n\n\n\n\n\nMar 25, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing R for Twitter Analysis\n\n\n6 min\n\n\n\nTwitter\n\n\nR\n\n\n\n\n\n\n\nMar 21, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysing GA4 Data With R\n\n\n7 min\n\n\n\nGA4\n\n\nR\n\n\nRStudio\n\n\n\n\n\n\n\nMar 14, 2023\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\n\n\n\n\n\n\nSmall Business Intro to Machine Learning\n\n\n\n\n\n\nMark Vanderstay\n\n\nMay 1, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  }
]